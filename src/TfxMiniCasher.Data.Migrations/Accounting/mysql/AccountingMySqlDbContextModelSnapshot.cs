// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xyz.TForce.MiniCasher.Data.Migrations.Accounting;

namespace Xyz.TForce.MiniCasher.Data.Migrations.Accounting.mysql
{
    [DbContext(typeof(AccountingMySqlDbContext))]
    partial class AccountingMySqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("AccountDescription")
                        .HasMaxLength(4000);

                    b.Property<Guid>("AccountId");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<int>("DebitOrCredit");

                    b.Property<bool>("IsHidden");

                    b.Property<long>("MetaCreatedTimeCode");

                    b.Property<bool>("MetaIsDeleted");

                    b.Property<long>("MetaModifiedTimeCode");

                    b.Property<DateTime?>("MetaRowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("ParentAccountId");

                    b.HasKey("Id");

                    b.HasIndex("AccountCode")
                        .IsUnique()
                        .HasName("UX_AccountCode");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasName("UX_AccountId");

                    b.HasIndex("ParentAccountId")
                        .IsUnique();

                    b.ToTable("Accounting_Accounts");
                });

            modelBuilder.Entity("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Option", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(256);

                    b.Property<long>("MetaCreatedTimeCode");

                    b.Property<bool>("MetaIsDeleted");

                    b.Property<long>("MetaModifiedTimeCode");

                    b.Property<DateTime?>("MetaRowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("OptionCode")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("OptionDescription")
                        .HasMaxLength(4000);

                    b.Property<string>("OptionGroup")
                        .HasMaxLength(256);

                    b.Property<Guid>("OptionId");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("OptionCode")
                        .IsUnique()
                        .HasName("UX_OptionCode");

                    b.HasIndex("OptionId")
                        .IsUnique()
                        .HasName("UX_OptionId");

                    b.ToTable("Accounting_Options");
                });

            modelBuilder.Entity("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreditAccountId");

                    b.Property<Guid>("DebitAccountId");

                    b.Property<long>("IssuedTimeCode");

                    b.Property<long>("MetaCreatedTimeCode");

                    b.Property<bool>("MetaIsDeleted");

                    b.Property<long>("MetaModifiedTimeCode");

                    b.Property<DateTime?>("MetaRowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TransactionAmount");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("TransactionId");

                    b.Property<string>("TransactionName")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId")
                        .IsUnique();

                    b.HasIndex("DebitAccountId")
                        .IsUnique();

                    b.HasIndex("TransactionCode")
                        .IsUnique()
                        .HasName("UX_TransactionCode");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasName("UX_TransactionId");

                    b.ToTable("Accounting_Transactions");
                });

            modelBuilder.Entity("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", b =>
                {
                    b.HasOne("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", "ParentAccount")
                        .WithOne()
                        .HasForeignKey("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", "ParentAccountId")
                        .HasPrincipalKey("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Transaction", b =>
                {
                    b.HasOne("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", "CreditAccount")
                        .WithOne()
                        .HasForeignKey("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Transaction", "CreditAccountId")
                        .HasPrincipalKey("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", "DebitAccount")
                        .WithOne()
                        .HasForeignKey("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Transaction", "DebitAccountId")
                        .HasPrincipalKey("Xyz.TForce.MiniCasher.Data.Repositories.Accounting.Entities.Account", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
